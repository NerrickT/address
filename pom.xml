<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <prerequisites>
        <maven>3.0.0</maven>
    </prerequisites>

    <groupId>opus</groupId>
    <artifactId>address</artifactId>
    <version>0.1</version>
    <name>Glorified Address Book</name>

    <properties>
        <dropwizard.version>0.8.0-rc2</dropwizard.version>
        <dropwizard.jooq.version>0.8.0-0-SNAPSHOT</dropwizard.jooq.version>
        <jooq.version>3.5.0</jooq.version>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <repositories>
        <repository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>http://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <!--Dropwizard-->
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-core</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-auth</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-assets</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-migrations</artifactId>
            <version>${dropwizard.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard</groupId>
            <artifactId>dropwizard-testing</artifactId>
            <version>${dropwizard.version}</version>
            <scope>test</scope>
        </dependency>

        <!--Data Access-->
        <dependency>
            <groupId>com.bendb.dropwizard</groupId>
            <artifactId>dropwizard-jooq</artifactId>
            <version>${dropwizard.jooq.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>io.dropwizard</groupId>
                    <artifactId>dropwizard-db</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.3-1102-jdbc41</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <executions>
                    <execution>
                        <id>enforce</id>
                        <configuration>
                            <rules>
                                <DependencyConvergence />
                            </rules>
                        </configuration>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <createDependencyReducedPom>true</createDependencyReducedPom>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>opus.address.AddressApplication</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>

            <!--
            This works by running the following on the command line:
            mvn -Ddeveloper=saem jooq-codegen:generate -rf :project-foo
            substitute saem for your name (based on what's in your database's DNS)
             -->

            <groupId>org.jooq</groupId>
            <artifactId>jooq-codegen-maven</artifactId>
            <version>${jooq.version}</version>

            <!-- Specify the plugin configuration.
                 The configuration format is the same as for the standalone code generator -->
            <configuration>

                <!-- JDBC connection parameters -->
                <jdbc>
                    <driver>org.postgresql.Driver</driver>
                    <url>jdbc:postgresql://localpg/address</url>
                    <user>address</user>
                    <password>address</password>
                </jdbc>

                <!-- Generator parameters -->
                <generator>
                    <name>org.jooq.util.DefaultGenerator</name>
                    <database>
                        <name>org.jooq.util.postgres.PostgresDatabase</name>
                        <includes>.*</includes>
                        <excludes></excludes>
                        <inputSchema>address</inputSchema>
                        <schemata>
                            <schema>
                                <!-- Use this as the developer's schema: -->
                                <inputSchema>public</inputSchema>

                                <!-- Use this as the integration / production database: -->
                                <outputSchemaToDefault>true</outputSchemaToDefault>
                            </schema>
                        </schemata>
                    </database>
                    <target>
                        <packageName>opus.address.database.jooq.generated</packageName>
                        <directory>src/main/java/</directory>
                    </target>

                    <generate>
                        <!-- Primary key / foreign key relations should be generated and used.
                        This is a prerequisite for various advanced features.
                        Defaults to true -->
                        <relations>true</relations>

                        <!-- Generate the javax.annotation.Generated annotation to indicate
                        jOOQ version used for source code.
                        Defaults to true -->
                        <generatedAnnotation>true</generatedAnnotation>

                        <!-- Generate jOOQ Record classes for type-safe querying. You can
                        turn this off, if you don't need "active records" for CRUD
                        Defaults to true -->
                        <records>true</records>

                        <!-- Generate POJOs in addition to Record classes for usage of the
                        ResultQuery.fetchInto(Class) API
                        Defaults to false -->
                        <pojos>true</pojos>

                        <!-- Generate immutable POJOs for usage of the ResultQuery.fetchInto(Class) API
                        This overrides any value set in <pojos/>
                        Defaults to false -->
                        <immutablePojos>true</immutablePojos>

                        <!-- Generate interfaces that will be implemented by records and/or pojos.
                        You can also use these interfaces in Record.into(Class<?>) and similar
                        methods, to let jOOQ return proxy objects for them.
                        Defaults to false -->
                        <interfaces>false</interfaces>

                        <!-- Generate DAOs in addition to POJO classes
                        Defaults to false -->
                        <daos>false</daos>

                        <!-- Annotate POJOs and Records with JPA annotations for increased
                        compatibility and better integration with JPA/Hibernate, etc
                        Defaults to false -->
                        <jpaAnnotations>false</jpaAnnotations>

                        <!-- Annotate POJOs and Records with JSR-303 validation annotations
                        Defaults to false -->
                        <validationAnnotations>false</validationAnnotations>

                        <!-- Allow to turn off the generation of global object references, which include
                        - Tables.java
                        - Sequences.java
                        - UDTs.java
                        Turning off the generation of the above files may be necessary for very
                        large schemas, which exceed the amount of allowed constants in a class's
                        constant pool (64k) or, whose static initialiser would exceed 64k of
                        byte code
                        Defaults to true -->
                        <globalObjectReferences>true</globalObjectReferences>

                        <!-- Generate fluent setters in
                        - records
                        - pojos
                        - interfaces
                        Fluent setters are against the JavaBeans specification, but can be quite
                        useful to those users who do not depend on EL, JSP, JSF, etc.
                        Defaults to false -->
                        <fluentSetters>false</fluentSetters>
                    </generate>

                    <strategy>
                        <matchers>
                            <schemas>
                                <MatchersSchemaType>
                                    <expression>address</expression>
                                    <schemaClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>AS_IS</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </schemaClass>
                                    <schemaIdentifier>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>AS_IS</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </schemaIdentifier>
                                </MatchersSchemaType>
                            </schemas>

                            <tables>
                                <table>
                                    <!-- Expression is omitted. This will make this rule apply to all tables -->
                                    <tableIdentifier>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </tableIdentifier>
                                    <tableClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </tableClass>
                                    <daoClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </daoClass>
                                    <recordClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </recordClass>
                                    <interfaceClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </interfaceClass>
                                    <pojoClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0_Projection</expression>
                                    </pojoClass>
                                </table>
                            </tables>

                            <fields>
                                <field>
                                    <fieldIdentifier>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>PASCAL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </fieldIdentifier>
                                    <fieldMember>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>CAMEL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </fieldMember>
                                    <fieldSetter>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>CAMEL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </fieldSetter>
                                    <fieldGetter>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>CAMEL</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </fieldGetter>
                                </field>
                            </fields>

                            <routines>
                                <routine>
                                    <routineClass>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>AS_IS</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </routineClass>
                                    <routineMethod>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>AS_IS</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </routineMethod>
                                </routine>
                            </routines>

                            <sequences>
                                <sequence>
                                    <sequenceIdentifier>
                                        <!-- The optional transform element lets you apply a name transformation algorithm
                                        to transform the actual database name into a more convenient form. Possible values are:
                                                - AS_IS  : Leave the database name as it is             : MY_name => MY_name
                                        - LOWER  : Transform the database name into lower case  : MY_name => my_name
                                        - UPPER  : Transform the database name into upper case  : MY_name => MY_NAME
                                        - CAMEL  : Transform the database name into camel case  : MY_name => myName
                                        - PASCAL : Transform the database name into pascal case : MY_name => MyName -->
                                        <transform>AS_IS</transform>
                                        <!-- The mandatory expression element lets you specify a replacement expression to be used when
                                        replacing the matcher's regular expression. You can use indexed variables $0, $1, $2. -->
                                        <expression>$0</expression>
                                    </sequenceIdentifier>
                                </sequence>
                            </sequences>

                        </matchers>
                    </strategy>
                </generator>
            </configuration>
        </plugin>
        </plugins>
    </build>
</project>
